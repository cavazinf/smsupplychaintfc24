// SPDX-License-Identifier: MIT
pragma solidity ^0.8.22;

import "@openzeppelin/contracts/access/Ownable.sol";

contract SupplyChaintfc24 is Ownable {
    constructor() Ownable(msg.sender) {} // Chame o construtor Ownable com o endereÃ§o do deployer do contrato SupplyChain

   enum Status {
       Ordered,
       Shipped,
       Delivered,
       Cancelled
   }

   struct Item {
       uint id;
       string name;
       Status status;
       address orderedBy;
       address approvedBy;
       address deliveredTo;
   }

   mapping(uint => Item) private items;
   uint private itemCount;

   function orderItem(string memory _name) public {
       Item memory newItem = Item({
           id: itemCount,
           name: _name,
           status: Status.Ordered,
           orderedBy: msg.sender,
           approvedBy: address(0),
           deliveredTo: address(0)
       });
       items[itemCount] = newItem;
       itemCount++;
   }

   function cancelItem(uint _id) public {
       require(
           items[_id].orderedBy == msg.sender,
           "Somente a pessoa que encomendou o item pode cancela-lo"
       );
       require(
           items[_id].status == Status.Ordered,
           "O item so pode ser cancelado se estiver no estado Encomendado"
       );
       items[_id].status = Status.Cancelled;
   }

   function approveItem(uint _id) public onlyOwner {
       require(
           items[_id].status == Status.Ordered,
           "O Item deve estar no estado Encomendado para ser aprovado"
       );
       items[_id].status = Status.Shipped;
       items[_id].approvedBy = msg.sender;
   }

   function shipItem(uint _id) public onlyOwner {
       require(
           items[_id].status == Status.Shipped,
           "O item deve estar no estado Enviado para ser enviado"
       );
       items[_id].status = Status.Delivered;
       items[_id].deliveredTo = items[_id].orderedBy;
   }

   function getItemStatus(uint _id) public view returns (Status) {
       return items[_id].status;
   }

   function getItem(uint _id) public view returns (Item memory) {
       return items[_id];
   }

   function getItemCount() public view returns (uint) {
       return itemCount;
   }
}
